import { RecordedEvent } from "./types";

export function generateReplayScript(events: RecordedEvent[]) {
  const payload = JSON.stringify(events);
  return `/* Lovable Action-to-Replay script */\n(function(){\n  const events = ${payload};\n  function wait(ms){ return new Promise(r=>setTimeout(r, ms)); }\n  async function findWithRetry(selector, timeoutMs = 3000, step = 100){\n    const start = Date.now();\n    let el = null;\n    while(Date.now() - start < timeoutMs){\n      el = document.querySelector(selector);\n      if(el) return el;\n      await wait(step);\n    }\n    return null;\n  }\n  async function run(opts={ dryRun:false, preserveTiming:true, timeoutMs:3000 }){\n    let lastTs = 0;\n    for(const e of events){\n      const delta = e.timestamp - lastTs;\n      lastTs = e.timestamp;\n      if((opts.preserveTiming??true) && delta>0) await wait(delta); else await wait(150);\n      if(e.type==='click' && e.selector){\n        const el = await findWithRetry(e.selector, opts.timeoutMs||3000);\n        if(!el) continue;\n        if(opts.dryRun){ el.classList.add('ring','ring-2'); setTimeout(()=>el.classList.remove('ring','ring-2'), 500); continue; }\n        el.click();\n      }\n      if(e.type==='input' && e.selector){\n        const el = await findWithRetry(e.selector, opts.timeoutMs||3000);\n        if(!el) continue;\n        if(opts.dryRun){ el.classList.add('ring','ring-2'); setTimeout(()=>el.classList.remove('ring','ring-2'), 500); continue; }\n        el.value = e.value || '';\n        el.dispatchEvent(new Event('input', { bubbles:true }));\n        el.dispatchEvent(new Event('change', { bubbles:true }));\n      }\n      if(e.type==='navigate' && e.url){\n        if(opts.dryRun) continue;\n        window.history.pushState({}, '', e.url);\n        window.dispatchEvent(new PopStateEvent('popstate'));\n      }\n    }\n  }\n  window.lovableReplay = { run };\n})();\n`;
}
